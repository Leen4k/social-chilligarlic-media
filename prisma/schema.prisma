generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  title     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  hearts    Heart[]
  comments   Comment[]
  photos Photo[]
}

model Photo {
  id String @id @default(cuid())
  url String[] 
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Heart {
  id      String @id @default(cuid())
  emojiName    String?
  postId  String 
  userId  String 
  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id String @id @default(cuid())
  message String
  postId String
  userId String      
  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}


model Follow {
  id          String    @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime  @default(now())
  follower    User      @relation("Follower", fields: [followerId], references: [id])
  following   User      @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}



model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  cover         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  hearts        Heart[]
  follows       Follow[]       @relation("Follower")
  followers     Follow[]       @relation("Following")
  @@map("users")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
